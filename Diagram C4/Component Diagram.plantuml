@startuml
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Component.puml

LAYOUT_WITH_LEGEND()

title Component Diagram for "Backend Container" of Smart Windows Manager

System_Ext(frontend_ref, "Frontend Container", "React Dashboard - pobiera dane co 1s")
System_Ext(azure_storage_ref, "Azure Blob Storage", "Przechowuje logi akcji")
System_Ext(local_logs_ref, "Lokalne Logi", "Pliki tekstowe z rotacją")

Container_Boundary(backend_c, "Backend Container (Python/Flask)") {
    Component(api_app, "API Controller", "Flask App (api_app.py)", "Obsługuje endpointy REST API: /get_data, /set_manual_control, /open_window, /close_window, /activate_alarm, /deactivate_alarm. Konfiguruje CORS.")
    
    Component(sensor_manager, "Sensor Manager", "sensor_manager.py", "Centralne zarządzanie danymi ze wszystkich okien. Przechowuje current_window_data w pamięci. Thread-safe dostęp do danych.")
    
    Component(data_generator, "Data Generator", "data_generator.py", "Orkiestruje uruchamianie i zatrzymywanie wątków okien. Zarządza cyklem życia symulacji.")
    
    Component(window_threads, "Window Threads", "window.py (threading.Thread)", "Każde okno to osobny wątek. Aktualizuje czujniki co 0.5s, sprawdza progi co 2s, wykonuje automatyczne akcje.")
    
    Component(sensors, "Sensors", "sensors.py", "4 typy czujników: TemperatureSensor, HumiditySensor, LightSensor, MotionSensor. Symulacja z trendami i losowością.")
    
    Component(action_logger, "Action Logger", "action_logger.py", "Logowanie akcji lokalnie (RotatingFileHandler) i do Azure Blob Storage (append_block). Fallback na lokalne przy błędach Azure.")
    
    Component(storage, "Storage Manager", "storage.py", "Zarządzanie połączeniem z Azure Blob Storage. Obsługa błędów i retry logic.")

    ' Relacje wewnętrzne
    Rel(api_app, sensor_manager, "Pobiera dane okien", "get_all_windows_data()")
    Rel(api_app, window_threads, "Steruje oknami", "set_manual_control(), open_window(), close_window()")
    Rel(api_app, action_logger, "Loguje akcje API", "log_action()")
    
    Rel(data_generator, window_threads, "Zarządza wątkami", "start(), stop(), join()")
    Rel(window_threads, sensors, "Aktualizuje czujniki", "update_value()")
    Rel(window_threads, sensor_manager, "Przekazuje dane", "update_sensor_data()")
    Rel(window_threads, action_logger, "Loguje akcje automatyczne", "log_action()")
    
    Rel(action_logger, storage, "Zapisuje do Azure", "append_to_blob()")
    
    ' Relacje do systemów zewnętrznych
    Rel_U(api_app, frontend_ref, "Odpowiada na żądania", "HTTP REST (JSON)")
    Rel_D(action_logger, local_logs_ref, "Zapisuje lokalnie", "RotatingFileHandler")
    Rel_D(storage, azure_storage_ref, "Synchronizuje logi", "Azure Storage API")
}

note right of window_threads
  Każdy wątek okna:
  1. Aktualizuje 4 czujniki co 0.5s
  2. Sprawdza progi co 2s:
     - Temp > 30°C → zamknij + alarm
     - Temp < 10°C → otwórz
     - Wilgotność > 70% → zamknij
     - Ruch + alarm → log ostrzeżenia
  3. Wykonuje akcje automatyczne
     (jeśli manual_control_enabled = False)
end note

note right of sensors
  Symulacja realistyczna:
  - Trendy (rosnące/malejące)
  - Losowe zmiany ±0.1
  - Ograniczenia zakresów
  - MotionSensor: 5% szansy zmiany
end note

@enduml
