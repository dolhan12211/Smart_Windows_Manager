Aby zrealizować projekt Smart Window Manager, potrzebujesz dwóch głównych komponentów działających na Twojej skonfigurowanej maszynie wirtualnej z Ubuntu na Azure:

1. **Skrypt symulujący dane** - generuje i wysyła dane środowiskowe (takie jak temperatura, wilgotność, poziom CO2) do Twojego serwera/endpointu API.
2. **Serwer nasłuchujący (REST API)** - odbiera dane wysłane przez skrypt symulujący, przetwarza te dane i podejmuje decyzje (np. czy otworzyć lub zamknąć okno).

### 1. Skrypt symulujący dane

Załóżmy, że masz już skonfigurowaną maszynę wirtualną z Ubuntu na Azure. Poniżej znajduje się przykładowy skrypt symulujący dane, napisany w Pythonie:
python
# symulator.py
import random
import time
import requests

def generate_sensor_data():
    temperature = random.uniform(15.0, 30.0)  # temperatura w stopniach Celsjusza
    humidity = random.uniform(30.0, 70.0)     # wilgotność w procentach
    co2_level = random.uniform(300, 1000)     # poziom CO2 w ppm
    return {
        "temperature": temperature,
        "humidity": humidity,
        "co2_level": co2_level
    }

def send_data_to_api(data):
    api_url = "http://<twoje-api-url>/window/status"
    response = requests.post(api_url, json=data)
    if response.status_code == 200:
        print(f"Dane zostały wysłane: {data}")
    else:
        print("Błąd przy wysyłaniu danych")

while True:
    data = generate_sensor_data()
    send_data_to_api(data)
    time.sleep(5)  # Czas oczekiwania przed kolejną symulacją
Zastąp `` rzeczywistym adresem URL Twojego API.

### 2. Serwer nasłuchujący (REST API)

Jako serwer nasłuchujący możesz użyć prostego serwera API utworzonego za pomocą Flask, który będzie odbierał dane od symulatora. Poniżej znajdziesz prosty przykład aplikacji Flask:
python
# app.py
from flask import Flask, request, jsonify

app = Flask(__name__)

@app.route('/window/status', methods=['POST'])
def window_status():
    data = request.get_json()
    print(f"Otrzymane dane: {data}")
    # Tutaj dodaj logikę decyzyjną dotyczącą otwierania/zamykania okna
    return jsonify({"success": True, "message": "Dane zostały otrzymane"})

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000, debug=True)
### Uruchomienie serwera Flask na maszynie wirtualnej

1. Zainstaluj Flask, jeśli jeszcze tego nie zrobiłeś:
   pip install Flask
   
2. Uruchom serwer Flask:
   python app.py
   
Serwer będzie teraz nasłuchiwać na porcie `5000` i oczekiwać na dane od symulatora.

### Konfiguracja środowiska

1. Zainstaluj Pythona i pip na maszynie wirtualnej Ubuntu (jeśli nie są już zainstalowane).
2. Skopiuj powyższe skrypty (`symulator.py` i `app.py`) na maszynę wirtualną.
3. Uruchom serwer Flask (`app.py`), aby zacząć odbierać dane.
4. Uruchom skrypt symulatora (`symulator.py`), aby zacząć wysyłać dane do serwera Flask.

Pamiętaj, aby dostosować adres URL API w skrypcie symulatora do adresu, pod którym uruchomiony jest Twój serwer Flask.