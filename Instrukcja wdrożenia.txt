# Zmienne środowiskowe
RESOURCE_GROUP="smartwindowResourceGroup"
LOCATION="francesouth"
VM_NAME="smartwindowVM"
IMAGE="Ubuntu2204"
SIZE="Standard_A1"
ADMIN_USERNAME="smartwindow_user"
IOT_HUB_NAME="smartwindowIotHub"       # Musi być globalnie unikalna
IOT_HUB_SKU="S1"                        # Standardowa warstwa IoT Hub
IOT_DEVICE_ID="smartwindowDevice"      # Nazwa urządzenia IoT

# 1. Stworzenie grupy zasobów
az group create --name $RESOURCE_GROUP --location $LOCATION

# 2. Stworzenie IoT Huba w warstwie Standard S1
az iot hub create \
  --resource-group $RESOURCE_GROUP \
  --name $IOT_HUB_NAME \
  --sku $IOT_HUB_SKU \
  --location $LOCATION

# 3. Dodanie urządzenia IoT do huba
az iot hub device-identity create \
  --hub-name $IOT_HUB_NAME \
  --device-id $IOT_DEVICE_ID

# 4. Stworzenie maszyny wirtualnej z kluczem SSH
az vm create \
   --resource-group $RESOURCE_GROUP \
   --name $VM_NAME \
   --image $IMAGE \
   --size $SIZE \
   --admin-username $ADMIN_USERNAME \
   --generate-ssh-keys

# 5. Otwarcie portów wymaganych do działania aplikacji: SSH, HTTP, 3000, 8000
for PORT in 22 80 3000 8000; do
  az network nsg rule create \
     --resource-group $RESOURCE_GROUP \
     --nsg-name ${VM_NAME}NSG \
     --name allow-port-$PORT \
     --protocol tcp \
     --priority $((1000 + PORT)) \
     --destination-port-range $PORT \
     --access allow
done

# 6. Skrypt konfiguracyjny: Docker, Python, Git, Flask + potrzebne paczki + klon repo + uruchomienie dockera
INSTALL_SCRIPT='#!/bin/bash
# Aktualizacja systemu
sudo apt update -y

# Instalacja Git, Docker, Docker Compose, Python + pip
sudo apt install -y git docker.io docker-compose python3-pip

# Włączenie i uruchomienie dockera
sudo systemctl enable docker
sudo systemctl start docker

# Dodanie użytkownika do grupy docker (żeby nie używać sudo)
sudo usermod -aG docker $USER

# Instalacja bibliotek Python wymaganych przez projekt
pip3 install Flask Flask-Cors python-dotenv azure-storage-blob

# Klonowanie repozytorium
git clone https://github.com/dolhan12211/Smart_Windows_Manager.git

# Przejście do katalogu projektu
cd Smart_Windows_Manager

# Build i uruchomienie Dockera (upewniamy się, że plik docker-compose.yml istnieje)
if [ -f docker-compose.yml ]; then
  docker-compose up -d --build
else
  echo "Brak pliku docker-compose.yml – nie można uruchomić kontenerów."
fi

echo "Środowisko projektowe gotowe: Docker, Python, Flask, Git, repozytorium sklonowane, kontenery uruchomione."
'

# 7. Zapisanie skryptu lokalnie
echo "$INSTALL_SCRIPT" > install_flask_env.sh
chmod +x install_flask_env.sh

# 8. Wykonanie skryptu na maszynie w celu końcowej konfiguracji
az vm run-command invoke \
   --command-id RunShellScript \
   --name $VM_NAME \
   --resource-group $RESOURCE_GROUP \
   --scripts "@install_flask_env.sh"